/**
 * Browser's implementation of the platform-specific tools.
 *
 * This file gonna replace PlatformTools for browser environment.
 * For node.js environment this class is not getting packaged.
 * Don't use methods of this class in the code, use PlatformTools methods instead.
 */
export class PlatformTools {

    /**
     * Type of the currently running platform.
     */
    static type: "browser"|"node" = "browser";

    /**
     * Gets global variable where global stuff can be stored.
     */
    static getGlobalVariable(): any {
        return window;
    }

    /**
     * Loads ("require"-s) given file or package.
     * This operation only supports on node platform
     */
    static load(name: string): any {
        if (this.type === "browser")
            throw new Error(`This option/function is not supported in the browser environment. Failed operation: require("${name}").`);

        return "";
    }

    /**
     * Normalizes given path. Does "path.normalize".
     */
    static pathNormilize(pathStr: string): string {
        if (this.type === "browser")
            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize("${pathStr}").`);

        return "";
    }

    /**
     * Gets file extension. Does "path.extname".
     */
    static pathExtname(pathStr: string): string {
        if (this.type === "browser")
            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname("${pathStr}").`);

        return "";
    }

    /**
     * Resolved given path. Does "path.resolve".
     */
    static pathResolve(pathStr: string): string {
        if (this.type === "browser")
            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve("${pathStr}").`);

        return "";
    }

    /**
     * Synchronously checks if file exist. Does "fs.existsSync".
     */
    static fileExist(pathStr: string): boolean {
        if (this.type === "browser")
            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync("${pathStr}").`);

        return false;
    }

    /**
     * Gets environment variable.
     */
    static getEnvVariable(name: string): any {
        // if (this.type === "browser")
        //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env["${name}"].`);
        return undefined;
    }

    static readFileSync(filename: string): any {
        if (this.type === "browser")
            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.readFileSync("${filename}").`);
        return null;
    }
    
    static appendFileSync(filename: string, data: any) {
        if (this.type === "browser")
            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync("${filename}").`);
    }

    /**
     * Highlights sql string to be print in the console.
     */
    static highlightSql(sql: string) {
        return sql;
    }

    /**
     * Highlights json string to be print in the console.
     */
    static highlightJson(json: string) {
        return json;
    }

}

/**
 * Simple version of the chalk library without color and format
 * TODO: make it more dynamic or maybe replace it with an actual library that
 * works in the browser
 */
function Chalk() {}

let colors = ['underline', 'bold', 'yellow', 'gray', 'red'];
let styles: any = {};

for(let i = 0; i < colors.length; i++) {
    styles[colors[i]] = {
        get() {
            return build.call(this, colors[i]);
        }
    };
}

const proto = Object.defineProperties(() => {}, styles);

function build() {
    const builder = function () {
        const args = arguments;
        let str = String(args[0]);
        if(args.length === 0) {
            return '';
        }
		if (args.length > 1) {
            for (let a = 1; a < args.length; a++) {
                str += ' ' + args[a];
            }
        }
        return str;
    };
    
    (builder as any).__proto__ = proto;
    return builder;
}

Object.defineProperties(Chalk.prototype, styles);
export const chalk = new (Chalk as any)();

/**
 * These classes are needed for stream operations or
 * in the mongodb driver. both aren't supported in the browser
 */
export class EventEmitter {}

export class Readable {}

export class Writable {}

export interface ReadStream {}